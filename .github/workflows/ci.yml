name: CI

on: 
  [push, pull_request]

jobs:
  build:
    runs-on: self-hosted
    
    steps:
      # Nettoyage préalable des fichiers Python
      - name: Nettoyage préalable
        run: |
          echo "🧹 Nettoyage des fichiers cache Python..."
          sudo find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          sudo find . -name "*.pyc" -delete 2>/dev/null || true
          echo "Nettoyage terminé!"
      
      # Checkout du dépôt
      - name: Checkout dépot
        uses: actions/checkout@v3
        with:
          clean: true

      # Créer fichier .env pour les tests
      - name: Créer fichier .env pour les tests
        run: |
          echo "DB_HOST=localhost" > .env
          echo "DB_PORT=3306" >> .env
          echo "DB_NAME=labo03_db" >> .env
          echo "DB_USER=labo03" >> .env
          echo "DB_PASS=labo03" >> .env
          echo "REDIS_HOST=localhost" >> .env
          echo "REDIS_PORT=6380" >> .env
          echo "REDIS_DB=0" >> .env

      # Créer le réseau Docker si nécessaire
      - name: Créer le réseau Docker
        run: |
          echo "🌐 Vérification du réseau Docker..."
          docker network create labo03-network 2>/dev/null || echo "Réseau labo03-network existe déjà"
          docker network ls | grep labo03-network

      # Nettoyer les conteneurs existants et libérer les ports
      - name: Nettoyer les conteneurs existants et libérer les ports
        run: |
          echo "🧹 Nettoyage complet des conteneurs et ports..."
          # Arrêter tous les conteneurs du projet
          docker compose down --remove-orphans 2>/dev/null || docker-compose down --remove-orphans 2>/dev/null || true
          # Arrêter les conteneurs qui utilisent nos ports
          docker ps -q --filter "publish=5000" | xargs -r docker stop 2>/dev/null || true
          docker ps -q --filter "publish=5001" | xargs -r docker stop 2>/dev/null || true  
          docker ps -q --filter "publish=6379" | xargs -r docker stop 2>/dev/null || true
          docker ps -q --filter "publish=6380" | xargs -r docker stop 2>/dev/null || true
          docker ps -q --filter "publish=3306" | xargs -r docker stop 2>/dev/null || true
          # Nettoyer les conteneurs arrêtés
          docker container prune -f 2>/dev/null || true
          # Vérifier que les ports sont libres
          echo "Ports actuellement utilisés:"
          netstat -tlnp | grep -E ':(5000|5001|6379|6380|3306)' || echo "Aucun port en conflit détecté"
          echo "Nettoyage terminé"

      # Démarrer les services avec Docker Compose
      - name: Démarrer les services avec Docker Compose
        run: |
          echo "🚀 Démarrage des services de base de données..."
          docker compose up -d mysql redis || docker-compose up -d mysql redis
          echo "⏳ Attente que les services soient prêts..."
          sleep 20

      # Installer les dépendances Python
      - name: Installer les dépendances Python
        run: |
          python3 -m pip install --upgrade pip --break-system-packages
          pip3 install -r requirements.txt --break-system-packages
          pip3 install pytest --break-system-packages

      # Vérifier la disponibilité de la base de données
      - name: Vérifier la disponibilité de la base de données
        run: |
          echo "🔍 Vérification de la disponibilité de MySQL..."
          # Attendre que MySQL soit prêt
          timeout 60 bash -c 'until docker compose exec mysql mysqladmin -u labo03 -plabo03 ping 2>/dev/null; do sleep 2; done' || timeout 60 bash -c 'until docker-compose exec mysql mysqladmin -u labo03 -plabo03 ping 2>/dev/null; do sleep 2; done'
          echo "✅ MySQL est prêt"
          
          echo "🔍 Vérification des tables dans la base de données..."
          docker compose exec mysql mysql -u labo03 -plabo03 labo03_db -e "SHOW TABLES;" || docker-compose exec mysql mysql -u labo03 -plabo03 labo03_db -e "SHOW TABLES;"
          
          echo "🔍 Vérification de Redis..."
          docker compose exec redis redis-cli ping || docker-compose exec redis redis-cli ping
          echo "✅ Redis est prêt"

      # Lancer les tests
      - name: Lancer les tests
        run: |
          export PYTHONPATH=$(pwd)/src
          /home/log430/.local/bin/pytest src/tests --maxfail=1 --disable-warnings -v

      # Déploiement local si les tests réussissent
      - name: Déploiement local
        if: success()
        run: |
          echo "🚀 Déploiement de l'application..."
          # Arrêt propre avec nettoyage
          docker compose down --remove-orphans || docker-compose down --remove-orphans || true
          sleep 2
          # Démarrage des services
          docker compose up -d --build || docker-compose up -d --build
          sleep 5
          echo "📊 Statut des conteneurs:"
          docker compose ps || docker-compose ps
          echo "🌐 Application disponible sur:"
          echo "  - Store Manager: http://localhost:5001"
          echo "  - GraphQL: http://localhost:5001/stocks/graphql-query"
          echo "  - MySQL: localhost:3306"
          echo "  - Redis: localhost:6380"
          echo "✅ Déploiement terminé!"

      # Nettoyage final des fichiers Python
      - name: Nettoyage final
        if: always()
        run: |
          echo "🧹 Nettoyage des fichiers cache Python..."
          sudo find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
          sudo find . -name "*.pyc" -delete 2>/dev/null || true
          echo "✅ Nettoyage final terminé!"
